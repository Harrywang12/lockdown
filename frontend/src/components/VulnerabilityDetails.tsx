import React, { useState, useEffect } from 'react'
import { useParams, Link } from 'react-router-dom'
import { 
  AlertTriangle, 
  Shield, 
  Download, 
  ExternalLink, 
  Clock, 
  Zap,
  CheckCircle,
  ArrowLeft,
  Brain,
  Code,
  FileText
} from 'lucide-react'
import { useQuery, useMutation } from 'react-query'
import { motion } from 'framer-motion'
import { 
  getVulnerabilities, 
  getVulnerabilityExplanation,
  exportScanReport 
} from '../services/api'
import { toast } from 'react-hot-toast'
import { cn } from '../utils/cn'
import { Vulnerability, AIExplanation } from '../types'

const VulnerabilityDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>()
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)
  const [explanation, setExplanation] = useState<AIExplanation | null>(null)
  const [isLoadingExplanation, setIsLoadingExplanation] = useState(false)

  // Fetch vulnerability data
  const { data: vulnerabilities = [], isLoading } = useQuery(
    'vulnerabilities',
    () => getVulnerabilities()
  )

  // Find the specific vulnerability
  useEffect(() => {
    if (id && vulnerabilities.length > 0) {
      const vuln = vulnerabilities.find(v => v.id === id)
      setSelectedVulnerability(vuln || null)
    }
  }, [id, vulnerabilities])

  // Get AI explanation mutation
  const explanationMutation = useMutation(getVulnerabilityExplanation, {
    onSuccess: (data) => {
      if (data.explanation) {
        setExplanation(data.explanation)
        toast.success('AI explanation generated successfully!')
      }
    },
    onError: (error: Error) => {
      toast.error(error.message || 'Failed to generate AI explanation')
    }
  })

  // Generate AI explanation
  const handleGenerateExplanation = async () => {
    if (!selectedVulnerability) return

    setIsLoadingExplanation(true)
    try {
      await explanationMutation.mutateAsync({
        vulnerabilityId: selectedVulnerability.id,
        vulnerability: {
          cve_id: selectedVulnerability.cve_id,
          ghsa_id: (selectedVulnerability.raw_data as any)?.aliases?.find?.((a: string) => typeof a === 'string' && a.startsWith('GHSA-')),
          severity: selectedVulnerability.severity,
          title: selectedVulnerability.title,
          description: selectedVulnerability.description,
          vulnerability_type: selectedVulnerability.vulnerability_type,
          affected_component: selectedVulnerability.affected_component,
          affected_version: selectedVulnerability.affected_version,
          fixed_version: selectedVulnerability.fixed_version,
          cvss_score: selectedVulnerability.cvss_score
        }
      })
    } catch (error) {
      console.error('Explanation generation error:', error)
    } finally {
      setIsLoadingExplanation(false)
    }
  }

  // Get severity color and icon
  const getSeverityInfo = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return { color: 'text-security-critical', bgColor: 'bg-security-critical', icon: AlertTriangle }
      case 'HIGH':
        return { color: 'text-security-high', bgColor: 'bg-security-high', icon: AlertTriangle }
      case 'MEDIUM':
        return { color: 'text-security-medium', bgColor: 'bg-security-medium', icon: Shield }
      case 'LOW':
        return { color: 'text-security-low', bgColor: 'bg-security-low', icon: Shield }
      default:
        return { color: 'text-gray-600', bgColor: 'bg-gray-600', icon: Shield }
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    )
  }

  if (!selectedVulnerability) {
    return (
      <div className="text-center py-12">
        <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Vulnerability Not Found</h2>
        <p className="text-gray-600 mb-4">The requested vulnerability could not be found.</p>
        <Link to="/dashboard" className="btn-primary">
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Dashboard
        </Link>
      </div>
    )
  }

  const severityInfo = getSeverityInfo(selectedVulnerability.severity)
  const SeverityIcon = severityInfo.icon

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Link
            to="/dashboard"
            className="btn-secondary"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Vulnerability Details</h1>
            <p className="text-gray-600">Detailed analysis and AI-powered recommendations</p>
          </div>
        </div>
        <div className="flex items-center space-x-3">
          <button
            onClick={handleGenerateExplanation}
            disabled={isLoadingExplanation || !!explanation}
            className={cn(
              "btn-primary flex items-center space-x-2",
              explanation && "btn-secondary"
            )}
          >
            {isLoadingExplanation ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            ) : explanation ? (
              <CheckCircle className="h-4 w-4" />
            ) : (
              <Brain className="h-4 w-4" />
            )}
            <span>
              {isLoadingExplanation ? 'Generating...' : 
               explanation ? 'Explanation Ready' : 'Get AI Explanation'}
            </span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Vulnerability Info */}
        <div className="lg:col-span-2 space-y-6">
          {/* Vulnerability Overview */}
          <motion.div className="card" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2 }}>
            <div className="card-header">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">Vulnerability Overview</h2>
                <div className={cn("badge", severityInfo.bgColor)}>
                  {selectedVulnerability.severity}
                </div>
              </div>
            </div>
            <div className="card-body space-y-4">
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  {selectedVulnerability.title}
                </h3>
                <p className="text-gray-700 leading-relaxed">
                  {selectedVulnerability.description}
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Type</label>
                  <p className="text-sm text-gray-900 capitalize">
                    {selectedVulnerability.vulnerability_type}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Component</label>
                  <p className="text-sm text-gray-900">
                    {selectedVulnerability.affected_component || 'Unknown'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">CVE ID</label>
                  <p className="text-sm text-gray-900">
                    {selectedVulnerability.cve_id || 'Not specified'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">GHSA ID</label>
                  <p className="text-sm text-gray-900">
                    {(selectedVulnerability.raw_data as any)?.aliases?.find?.((a: string) => typeof a === 'string' && a.startsWith('GHSA-')) || 'Not specified'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">CVSS Score</label>
                  <p className="text-sm text-gray-900">
                    {selectedVulnerability.cvss_score || 'Not specified'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Affected Version</label>
                  <p className="text-sm text-gray-900">
                    {selectedVulnerability.affected_version || 'Unknown'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Fixed Version</label>
                  <p className="text-sm text-gray-900">
                    {selectedVulnerability.fixed_version || 'Not available'}
                  </p>
                </div>
              </div>

              {selectedVulnerability.reference_urls && selectedVulnerability.reference_urls.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-2">References</label>
                  <div className="space-y-2">
                    {selectedVulnerability.reference_urls.map((ref, index) => (
                      <a
                        key={index}
                        href={ref}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center space-x-2 text-sm text-primary-600 hover:text-primary-700"
                      >
                        <ExternalLink className="h-4 w-4" />
                        <span className="truncate">{ref}</span>
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </motion.div>

          {/* AI Explanation */}
          {explanation && (
            <motion.div className="card" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2 }}>
              <div className="card-header">
                <div className="flex items-center space-x-2">
                  <Brain className="h-5 w-5 text-primary-600" />
                  <h2 className="text-xl font-semibold text-gray-900">AI-Powered Explanation</h2>
                </div>
                <div className="flex items-center space-x-2 text-sm text-gray-500">
                  <span>Confidence: {(explanation.confidence_score * 100).toFixed(0)}%</span>
                  <span>•</span>
                  <span>{explanation.tokens_used} tokens</span>
                </div>
              </div>
              <div className="card-body space-y-6">
                {/* Explanation */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">What is this vulnerability?</h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-gray-700 leading-relaxed">{explanation.explanation}</p>
                  </div>
                </div>

                {/* Suggested Fix */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">How to fix it</h3>
                  <div className="bg-blue-50 rounded-lg p-4">
                    <p className="text-gray-700 leading-relaxed">{explanation.suggested_fix}</p>
                  </div>
                </div>

                {/* Risk Assessment */}
                {explanation.risk_assessment && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-3">Risk Assessment</h3>
                    <div className="bg-yellow-50 rounded-lg p-4">
                      <p className="text-gray-700 leading-relaxed">{explanation.risk_assessment}</p>
                    </div>
                  </div>
                )}

                {/* Mitigation Steps */}
                {explanation.mitigation_steps && explanation.mitigation_steps.length > 0 && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-3">Mitigation Steps</h3>
                    <div className="space-y-2">
                      {explanation.mitigation_steps.map((step, index) => (
                        <div key={index} className="flex items-start space-x-3">
                          <div className="flex-shrink-0 mt-1">
                            <div className="h-2 w-2 rounded-full bg-primary-600"></div>
                          </div>
                          <p className="text-gray-700">{step}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          )}
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Severity Information */}
          <motion.div className="card" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2 }}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Severity Level</h3>
            </div>
            <div className="card-body text-center">
              <div className={cn("inline-flex items-center justify-center w-20 h-20 rounded-full mb-4", severityInfo.bgColor)}>
                <SeverityIcon className="h-10 w-10 text-white" />
              </div>
              <h4 className={cn("text-xl font-bold mb-2", severityInfo.color)}>
                {selectedVulnerability.severity}
              </h4>
              <p className="text-sm text-gray-600">
                {selectedVulnerability.severity === 'CRITICAL' && 'Immediate action required'}
                {selectedVulnerability.severity === 'HIGH' && 'High priority fix needed'}
                {selectedVulnerability.severity === 'MEDIUM' && 'Should be addressed soon'}
                {selectedVulnerability.severity === 'LOW' && 'Low risk, monitor closely'}
              </p>
            </div>
          </motion.div>

          {/* Technical Details */}
          <motion.div className="card" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2, delay: 0.03 }}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Technical Details</h3>
            </div>
            <div className="card-body space-y-3">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600">AI Model</span>
                <span className="font-medium text-gray-900">Gemini Pro</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600">Processing Time</span>
                <span className="font-medium text-gray-900">
                  {explanation ? `${explanation.processing_time_ms}ms` : 'N/A'}
                </span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600">Created</span>
                <span className="font-medium text-gray-900">
                  {new Date(selectedVulnerability.created_at).toLocaleDateString()}
                </span>
              </div>
            </div>
          </motion.div>

          {/* Quick Actions */}
          <motion.div className="card" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2, delay: 0.06 }}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Quick Actions</h3>
            </div>
            <div className="card-body space-y-3">
              <button
                onClick={handleGenerateExplanation}
                disabled={isLoadingExplanation || !!explanation}
                className={cn(
                  "w-full btn-primary",
                  explanation && "btn-secondary"
                )}
              >
                {explanation ? 'Explanation Ready' : 'Get AI Explanation'}
              </button>
              
              <button className="w-full btn-secondary">
                <Download className="h-4 w-4 mr-2" />
                Export Report
              </button>
              
              <button className="w-full btn-secondary">
                <Code className="h-4 w-4 mr-2" />
                View Fix Examples
              </button>
            </div>
          </motion.div>

          {/* Related Vulnerabilities */}
          <motion.div className="card" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2, delay: 0.09 }}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Related</h3>
            </div>
            <div className="card-body">
              <p className="text-sm text-gray-500">
                Similar vulnerabilities and related security issues will appear here.
              </p>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  )
}

export default VulnerabilityDetails
