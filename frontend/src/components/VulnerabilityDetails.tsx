import React, { useState, useEffect } from 'react'
import { useParams, Link } from 'react-router-dom'
import { 
  AlertTriangle, 
  Shield, 
  Download, 
  ExternalLink, 
  Clock, 
  Zap,
  CheckCircle,
  ArrowLeft,
  Brain,
  Code,
  FileText,
  Info,
  Globe,
  Fingerprint,
  Tag,
  RefreshCw
} from 'lucide-react'
import { useQuery, useMutation } from 'react-query'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  getVulnerabilities, 
  getVulnerabilityExplanation,
  getGHSADetails,
  exportScanReport 
} from '../services/api'
import { toast } from 'react-hot-toast'
import { cn } from '../utils/cn'
import { Vulnerability, AIExplanation, GHSADetails } from '../types'

// Import new UI components
import AnimatedCard from './ui/AnimatedCard'
import AnimatedContainer from './ui/AnimatedContainer'
import AnimatedIcon from './ui/AnimatedIcon'
import GlowingBadge from './ui/GlowingBadge'

const VulnerabilityDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>()
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)
  const [explanation, setExplanation] = useState<AIExplanation | null>(null)
  const [ghsaDetails, setGHSADetails] = useState<GHSADetails | null>(null)
  const [isLoadingExplanation, setIsLoadingExplanation] = useState(false)
  const [isLoadingGHSA, setIsLoadingGHSA] = useState(false)

  // Fetch vulnerability data
  const { data: vulnerabilities = [], isLoading } = useQuery(
    'vulnerabilities',
    () => getVulnerabilities()
  )

  // Find the specific vulnerability
  useEffect(() => {
    if (id && vulnerabilities.length > 0) {
      const vuln = vulnerabilities.find(v => v.id === id)
      setSelectedVulnerability(vuln || null)
    }
  }, [id, vulnerabilities])

  // Get AI explanation mutation
  const explanationMutation = useMutation(getVulnerabilityExplanation, {
    onSuccess: (data) => {
      if (data.explanation) {
        setExplanation(data.explanation)
        toast.success('AI explanation generated successfully!')
      }
    },
    onError: (error: Error) => {
      toast.error(error.message || 'Failed to generate AI explanation')
    }
  })

  // Get GHSA details mutation
  const ghsaMutation = useMutation(getGHSADetails, {
    onSuccess: (data) => {
      if (data) {
        setGHSADetails(data)
        toast.success('GHSA details retrieved successfully!')
      }
    },
    onError: (error: Error) => {
      toast.error(error.message || 'Failed to retrieve GHSA details')
    }
  })

  // Generate AI explanation
  const handleGenerateExplanation = async () => {
    if (!selectedVulnerability) return

    setIsLoadingExplanation(true)
    try {
      await explanationMutation.mutateAsync({
        vulnerabilityId: selectedVulnerability.id,
        vulnerability: {
          cve_id: selectedVulnerability.cve_id,
          ghsa_id: extractGHSAId(selectedVulnerability),
          severity: selectedVulnerability.severity,
          title: selectedVulnerability.title,
          description: selectedVulnerability.description,
          vulnerability_type: selectedVulnerability.vulnerability_type,
          affected_component: selectedVulnerability.affected_component,
          affected_version: selectedVulnerability.affected_version,
          fixed_version: selectedVulnerability.fixed_version,
          cvss_score: selectedVulnerability.cvss_score
        }
      })
    } catch (error) {
      console.error('Explanation generation error:', error)
    } finally {
      setIsLoadingExplanation(false)
    }
  }

  // Get GHSA details
  const handleGetGHSADetails = async () => {
    if (!selectedVulnerability) return
    
    const ghsaId = extractGHSAId(selectedVulnerability)
    if (!ghsaId) {
      toast.error('No GHSA ID found for this vulnerability')
      return
    }

    setIsLoadingGHSA(true)
    try {
      await ghsaMutation.mutateAsync({ ghsaId })
    } catch (error) {
      console.error('GHSA details fetch error:', error)
    } finally {
      setIsLoadingGHSA(false)
    }
  }

  // Extract GHSA ID from vulnerability data
  const extractGHSAId = (vulnerability: Vulnerability): string | undefined => {
    // Try to find GHSA ID in raw_data aliases
    const aliases = vulnerability.raw_data?.aliases || []
    const ghsaId = aliases.find((a: string) => typeof a === 'string' && a.startsWith('GHSA-'))
    
    // If not found in aliases, try other fields
    if (!ghsaId && vulnerability.raw_data?.id && typeof vulnerability.raw_data.id === 'string' && vulnerability.raw_data.id.startsWith('GHSA-')) {
      return vulnerability.raw_data.id
    }
    
    return ghsaId
  }

  // Get severity color and icon
  const getSeverityInfo = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return { color: 'danger', icon: AlertTriangle }
      case 'HIGH':
        return { color: 'warning', icon: AlertTriangle }
      case 'MEDIUM':
        return { color: 'warning', icon: Shield }
      case 'LOW':
        return { color: 'success', icon: Shield }
      default:
        return { color: 'info', icon: Shield }
    }
  }

  // Animation variants
  const fadeIn = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } }
  }

  const slideIn = {
    hidden: { opacity: 0, x: -30 },
    visible: { opacity: 1, x: 0, transition: { type: 'spring' as const, stiffness: 100, damping: 15 } }
  }

  if (isLoading) {
    return (
      <motion.div 
        className="flex items-center justify-center py-12"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      >
        <motion.div 
          className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
        />
      </motion.div>
    )
  }

  if (!selectedVulnerability) {
    return (
      <motion.div 
        className="text-center py-12"
        initial="hidden"
        animate="visible"
        variants={fadeIn}
      >
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1, rotate: [0, 10, 0, -10, 0] }}
          transition={{ duration: 0.5, type: "spring", stiffness: 200 }}
        >
          <AlertTriangle className="h-12 w-12 text-red-500 mx-auto mb-4" />
        </motion.div>
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">Vulnerability Not Found</h2>
        <p className="text-gray-600 dark:text-gray-300 mb-4">The requested vulnerability could not be found.</p>
        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
          <Link to="/dashboard" className="btn-primary">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Link>
        </motion.div>
      </motion.div>
    )
  }

  const severityInfo = getSeverityInfo(selectedVulnerability.severity)
  const hasGHSAId = !!extractGHSAId(selectedVulnerability)

  return (
    <motion.div 
      className="space-y-8"
      initial="hidden"
      animate="visible"
      variants={fadeIn}
    >
      {/* Header */}
      <motion.div 
        className="flex items-center justify-between"
        variants={slideIn}
      >
        <div className="flex items-center space-x-4">
          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
            <Link
              to="/dashboard"
              className="btn-secondary flex items-center space-x-2 px-3 py-2 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>Back</span>
            </Link>
          </motion.div>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Vulnerability Details</h1>
            <p className="text-gray-600 dark:text-gray-300">Detailed analysis and AI-powered recommendations</p>
          </div>
        </div>
        <div className="flex items-center space-x-3">
          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
            <button
              onClick={handleGenerateExplanation}
              disabled={isLoadingExplanation || !!explanation}
              className={cn(
                "btn-primary flex items-center space-x-2 px-4 py-2 rounded-lg transition-all duration-300",
                explanation && "btn-secondary"
              )}
            >
              {isLoadingExplanation ? (
                <motion.div 
                  className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                />
              ) : explanation ? (
                <CheckCircle className="h-4 w-4" />
              ) : (
                <Brain className="h-4 w-4" />
              )}
              <span>
                {isLoadingExplanation ? 'Generating...' : 
                 explanation ? 'Explanation Ready' : 'Get AI Explanation'}
              </span>
            </button>
          </motion.div>
          
          {hasGHSAId && (
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <button
                onClick={handleGetGHSADetails}
                disabled={isLoadingGHSA || !!ghsaDetails}
                className={cn(
                  "btn-secondary flex items-center space-x-2 px-4 py-2 rounded-lg transition-all duration-300",
                  ghsaDetails && "bg-green-50 text-green-700 border-green-200"
                )}
              >
                {isLoadingGHSA ? (
                  <motion.div 
                    className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600"
                    animate={{ rotate: 360 }}
                    transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                  />
                ) : ghsaDetails ? (
                  <CheckCircle className="h-4 w-4" />
                ) : (
                  <Info className="h-4 w-4" />
                )}
                <span>
                  {isLoadingGHSA ? 'Loading...' : 
                   ghsaDetails ? 'GHSA Details Loaded' : 'Load GHSA Details'}
                </span>
              </button>
            </motion.div>
          )}
        </div>
      </motion.div>

      <AnimatedContainer className="grid grid-cols-1 lg:grid-cols-3 gap-6" staggerChildren={true}>
        {/* Main Vulnerability Info */}
        <div className="lg:col-span-2 space-y-6">
          {/* Vulnerability Overview */}
          <AnimatedCard index={0}>
            <div className="card-header flex items-center justify-between">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Vulnerability Overview</h2>
              <GlowingBadge severity={selectedVulnerability.severity} size="md" glow={true} pulsate={true}>
                {selectedVulnerability.severity}
              </GlowingBadge>
            </div>
            <div className="card-body space-y-6">
              <div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  {selectedVulnerability.title}
                </h3>
                <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                  {selectedVulnerability.description}
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Type</label>
                  <p className="text-sm text-gray-900 dark:text-white capitalize">
                    {selectedVulnerability.vulnerability_type}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Component</label>
                  <p className="text-sm text-gray-900 dark:text-white">
                    {selectedVulnerability.affected_component || 'Unknown'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">CVE ID</label>
                  <p className="text-sm text-gray-900 dark:text-white">
                    {selectedVulnerability.cve_id || 'Not specified'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">GHSA ID</label>
                  <div className="flex items-center space-x-2">
                    <p className="text-sm text-gray-900 dark:text-white">
                      {extractGHSAId(selectedVulnerability) || 'Not specified'}
                    </p>
                    {hasGHSAId && !ghsaDetails && (
                      <motion.button
                        onClick={handleGetGHSADetails}
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        className="text-xs text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 font-medium"
                      >
                        View
                      </motion.button>
                    )}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">CVSS Score</label>
                  <p className="text-sm text-gray-900 dark:text-white">
                    {selectedVulnerability.cvss_score || 'Not specified'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Affected Version</label>
                  <p className="text-sm text-gray-900 dark:text-white">
                    {selectedVulnerability.affected_version || 'Unknown'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Fixed Version</label>
                  <p className="text-sm text-gray-900 dark:text-white">
                    {selectedVulnerability.fixed_version || 'Not available'}
                  </p>
                </div>
              </div>

              {selectedVulnerability.reference_urls && selectedVulnerability.reference_urls.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">References</label>
                  <div className="space-y-2">
                    {selectedVulnerability.reference_urls.map((ref, index) => (
                      <motion.a
                        key={index}
                        href={ref}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center space-x-2 text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300"
                        whileHover={{ x: 3 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <ExternalLink className="h-4 w-4" />
                        <span className="truncate">{ref}</span>
                      </motion.a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </AnimatedCard>

          {/* GHSA Details */}
          <AnimatePresence>
            {ghsaDetails && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
              >
                <AnimatedCard index={1} className="border-2 border-blue-100 dark:border-blue-900">
                  <div className="card-header flex items-center space-x-2">
                    <Fingerprint className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white">GitHub Security Advisory</h2>
                  </div>
                  <div className="card-body space-y-4">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                        {ghsaDetails.summary}
                      </h3>
                      <div className="flex flex-wrap gap-2 mb-3">
                        {ghsaDetails.classifications?.map((classification, idx) => (
                          <span 
                            key={idx}
                            className="px-2 py-1 bg-blue-50 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 text-xs rounded-full"
                          >
                            {classification}
                          </span>
                        ))}
                      </div>
                      <p className="text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-line">
                        {ghsaDetails.description}
                      </p>
                    </div>

                    <div className="space-y-3">
                      {ghsaDetails.affected_packages?.length > 0 && (
                        <div>
                          <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Affected Packages</label>
                          <div className="space-y-1">
                            {ghsaDetails.affected_packages.map((pkg, idx) => (
                              <div key={idx} className="flex items-center space-x-2 text-sm text-gray-900 dark:text-white">
                                <Tag className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                                <span>{pkg.name} ({pkg.ecosystem})</span>
                                <span className="text-gray-500 dark:text-gray-400">{pkg.affected_versions}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {ghsaDetails.references?.length > 0 && (
                        <div>
                          <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">References</label>
                          <div className="space-y-1">
                            {ghsaDetails.references.map((ref, idx) => (
                              <motion.a
                                key={idx}
                                href={ref}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex items-center space-x-2 text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300"
                                whileHover={{ x: 3 }}
                                whileTap={{ scale: 0.98 }}
                              >
                                <ExternalLink className="h-4 w-4" />
                                <span className="truncate">{ref}</span>
                              </motion.a>
                            ))}
                          </div>
                        </div>
                      )}

                      <div>
                        <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Published</label>
                        <p className="text-sm text-gray-900 dark:text-white">
                          {ghsaDetails.published_at && new Date(ghsaDetails.published_at).toLocaleDateString()}
                        </p>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Last Updated</label>
                        <p className="text-sm text-gray-900 dark:text-white">
                          {ghsaDetails.updated_at && new Date(ghsaDetails.updated_at).toLocaleDateString()}
                        </p>
                      </div>
                    </div>

                    <div className="mt-3 pt-3 border-t border-gray-100 dark:border-gray-800">
                      <motion.a
                        href={`https://github.com/advisories/${extractGHSAId(selectedVulnerability)}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center space-x-2 text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300"
                        whileHover={{ x: 3 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <Globe className="h-4 w-4" />
                        <span>View on GitHub Advisory Database</span>
                      </motion.a>
                    </div>
                  </div>
                </AnimatedCard>
              </motion.div>
            )}
          </AnimatePresence>

          {/* AI Explanation */}
          <AnimatePresence>
            {explanation && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
              >
                <AnimatedCard index={2} className="border-2 border-primary-100 dark:border-primary-900">
                  <div className="card-header flex items-center space-x-2">
                    <Brain className="h-5 w-5 text-primary-600 dark:text-primary-400" />
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white">AI-Powered Explanation</h2>
                    <div className="flex items-center ml-auto space-x-2 text-sm text-gray-500 dark:text-gray-400">
                      <span>Confidence: {(explanation.confidence_score * 100).toFixed(0)}%</span>
                      <span>•</span>
                      <span>{explanation.tokens_used} tokens</span>
                    </div>
                  </div>
                  <div className="card-body space-y-6">
                    {/* Explanation */}
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-3">What is this vulnerability?</h3>
                      <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
                        <p className="text-gray-700 dark:text-gray-300 leading-relaxed">{explanation.explanation}</p>
                      </div>
                    </div>

                    {/* Suggested Fix */}
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-3">How to fix it</h3>
                      <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                        <p className="text-gray-700 dark:text-gray-300 leading-relaxed">{explanation.suggested_fix}</p>
                      </div>
                    </div>

                    {/* Risk Assessment */}
                    {explanation.risk_assessment && (
                      <div>
                        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-3">Risk Assessment</h3>
                        <div className="bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4">
                          <p className="text-gray-700 dark:text-gray-300 leading-relaxed">{explanation.risk_assessment}</p>
                        </div>
                      </div>
                    )}

                    {/* Mitigation Steps */}
                    {explanation.mitigation_steps && explanation.mitigation_steps.length > 0 && (
                      <div>
                        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-3">Mitigation Steps</h3>
                        <div className="space-y-2">
                          {explanation.mitigation_steps.map((step, index) => (
                            <motion.div 
                              key={index} 
                              className="flex items-start space-x-3"
                              initial={{ opacity: 0, x: -10 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{ delay: index * 0.1 }}
                            >
                              <div className="flex-shrink-0 mt-1">
                                <div className="h-2 w-2 rounded-full bg-primary-600 dark:bg-primary-400"></div>
                              </div>
                              <p className="text-gray-700 dark:text-gray-300">{step}</p>
                            </motion.div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </AnimatedCard>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Severity Information */}
          <AnimatedCard index={0}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white">Severity Level</h3>
            </div>
            <div className="card-body text-center">
              <AnimatedIcon 
                color={severityInfo.color as any} 
                size="xl" 
                className="mx-auto mb-4"
                whileHover={{ rotate: 15, scale: 1.1 }}
              >
                <severityInfo.icon className="h-8 w-8" />
              </AnimatedIcon>
              <motion.h4 
                className={cn(
                  "text-xl font-bold mb-2",
                  `text-${severityInfo.color}-600 dark:text-${severityInfo.color}-400`
                )}
                animate={
                  selectedVulnerability.severity === 'CRITICAL' || selectedVulnerability.severity === 'HIGH' 
                    ? { scale: [1, 1.05, 1], transition: { duration: 2, repeat: Infinity }} 
                    : {}
                }
              >
                {selectedVulnerability.severity}
              </motion.h4>
              <p className="text-sm text-gray-600 dark:text-gray-300">
                {selectedVulnerability.severity === 'CRITICAL' && 'Immediate action required'}
                {selectedVulnerability.severity === 'HIGH' && 'High priority fix needed'}
                {selectedVulnerability.severity === 'MEDIUM' && 'Should be addressed soon'}
                {selectedVulnerability.severity === 'LOW' && 'Low risk, monitor closely'}
              </p>
            </div>
          </AnimatedCard>

          {/* Technical Details */}
          <AnimatedCard index={1}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white">Technical Details</h3>
            </div>
            <div className="card-body space-y-3">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600 dark:text-gray-300">AI Model</span>
                <span className="font-medium text-gray-900 dark:text-white">Gemini Pro</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600 dark:text-gray-300">Processing Time</span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {explanation ? `${explanation.processing_time_ms}ms` : 'N/A'}
                </span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600 dark:text-gray-300">Created</span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {new Date(selectedVulnerability.created_at).toLocaleDateString()}
                </span>
              </div>
            </div>
          </AnimatedCard>

          {/* Quick Actions */}
          <AnimatedCard index={2}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white">Quick Actions</h3>
            </div>
            <div className="card-body space-y-3">
              <motion.button
                onClick={handleGenerateExplanation}
                disabled={isLoadingExplanation || !!explanation}
                className={cn(
                  "w-full btn-primary px-4 py-2 rounded-lg flex items-center justify-center space-x-2 transition-all duration-300",
                  explanation && "btn-secondary"
                )}
                whileHover={!explanation ? { scale: 1.03 } : {}}
                whileTap={!explanation ? { scale: 0.98 } : {}}
              >
                {explanation ? (
                  <>
                    <CheckCircle className="h-4 w-4" />
                    <span>Explanation Ready</span>
                  </>
                ) : (
                  <>
                    <Brain className="h-4 w-4" />
                    <span>Get AI Explanation</span>
                  </>
                )}
              </motion.button>
              
              {hasGHSAId && (
                <motion.button
                  onClick={handleGetGHSADetails}
                  disabled={isLoadingGHSA || !!ghsaDetails}
                  className={cn(
                    "w-full btn-secondary px-4 py-2 rounded-lg flex items-center justify-center space-x-2 transition-all duration-300",
                    ghsaDetails && "bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-300 dark:border-green-800"
                  )}
                  whileHover={!ghsaDetails ? { scale: 1.03 } : {}}
                  whileTap={!ghsaDetails ? { scale: 0.98 } : {}}
                >
                  {ghsaDetails ? (
                    <>
                      <CheckCircle className="h-4 w-4" />
                      <span>GHSA Details Loaded</span>
                    </>
                  ) : (
                    <>
                      <Fingerprint className="h-4 w-4" />
                      <span>Load GHSA Details</span>
                    </>
                  )}
                </motion.button>
              )}
              
              <motion.button 
                className="w-full btn-secondary px-4 py-2 rounded-lg flex items-center justify-center space-x-2"
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.98 }}
              >
                <Download className="h-4 w-4" />
                <span>Export Report</span>
              </motion.button>
              
              <motion.button 
                className="w-full btn-secondary px-4 py-2 rounded-lg flex items-center justify-center space-x-2"
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.98 }}
              >
                <Code className="h-4 w-4" />
                <span>View Fix Examples</span>
              </motion.button>
            </div>
          </AnimatedCard>

          {/* Related Vulnerabilities */}
          <AnimatedCard index={3}>
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white">Related</h3>
            </div>
            <div className="card-body">
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Similar vulnerabilities and related security issues will appear here.
              </p>
              
              {selectedVulnerability.related_vulnerabilities && selectedVulnerability.related_vulnerabilities.length > 0 && (
                <div className="mt-4 space-y-2">
                  {selectedVulnerability.related_vulnerabilities.map((relatedVuln, index) => (
                    <Link 
                      key={index}
                      to={`/vulnerability/${relatedVuln.id}`}
                      className="block p-2 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg"
                    >
                      <div className="flex items-center space-x-2">
                        <GlowingBadge severity={relatedVuln.severity} size="sm" glow={false}>
                          {relatedVuln.severity}
                        </GlowingBadge>
                        <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                          {relatedVuln.title}
                        </p>
                      </div>
                    </Link>
                  ))}
                </div>
              )}
            </div>
          </AnimatedCard>
        </div>
      </AnimatedContainer>
    </motion.div>
  )
}

export default VulnerabilityDetails