import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  Cell
} from 'recharts';
import { cn } from '../../../utils/cn';

interface VulnerabilityData {
  name: string;
  value: number;
  color?: string;
}

interface VulnerabilityBarChartProps {
  data: VulnerabilityData[];
  height?: number;
  className?: string;
  darkMode?: boolean;
  horizontal?: boolean;
  animated?: boolean;
  maxBarSize?: number;
}

const VulnerabilityBarChart: React.FC<VulnerabilityBarChartProps> = ({
  data,
  height = 300,
  className,
  darkMode = false,
  horizontal = false,
  animated = true,
  maxBarSize = 40
}) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);
  
  // Default color if not provided
  const defaultColors = [
    '#ee2d4e', // Critical
    '#f46e37', // High
    '#f5a524', // Medium
    '#2ab05d', // Low
    '#09b876', // Safe
    '#26a8fc', // Primary
    '#8b5cf6', // Purple
    '#ec4899', // Pink
    '#14b8a6', // Teal
    '#f59e0b', // Amber
  ];
  
  // Custom tooltip component
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      const item = payload[0].payload;
      return (
        <div className="bg-white dark:bg-dark-card p-3 border border-slate-200 dark:border-dark-border rounded-lg shadow-lg">
          <p className="text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
            {item.name}
          </p>
          <p className="text-lg font-bold" style={{ color: item.color || defaultColors[0] }}>
            {item.value}
          </p>
        </div>
      );
    }
    
    return null;
  };
  
  // Animation variants for bars
  const barVariants = {
    hidden: { scaleY: 0, originY: 1 },
    visible: (i: number) => ({
      scaleY: 1,
      transition: {
        delay: i * 0.1,
        duration: 0.5,
        type: "spring",
        stiffness: 100
      }
    })
  };
  
  // Animation variants for horizontal bars
  const horizontalBarVariants = {
    hidden: { scaleX: 0, originX: 0 },
    visible: (i: number) => ({
      scaleX: 1,
      transition: {
        delay: i * 0.1,
        duration: 0.5,
        type: "spring",
        stiffness: 100
      }
    })
  };
  
  // Custom bar component with animation
  const AnimatedBar = (props: any) => {
    const { x, y, width, height, index, fill } = props;
    
    if (!animated) {
      return <rect x={x} y={y} width={width} height={height} fill={fill} rx={2} ry={2} />;
    }
    
    return horizontal ? (
      <motion.rect
        x={x}
        y={y}
        width={width}
        height={height}
        fill={fill}
        rx={2}
        ry={2}
        custom={index}
        variants={horizontalBarVariants}
        initial="hidden"
        animate="visible"
        style={{
          filter: hoveredIndex === index ? 'drop-shadow(0px 0px 6px rgba(0,0,0,0.2))' : 'none',
          opacity: hoveredIndex === null || hoveredIndex === index ? 1 : 0.7,
        }}
      />
    ) : (
      <motion.rect
        x={x}
        y={y}
        width={width}
        height={height}
        fill={fill}
        rx={2}
        ry={2}
        custom={index}
        variants={barVariants}
        initial="hidden"
        animate="visible"
        style={{
          filter: hoveredIndex === index ? 'drop-shadow(0px 0px 6px rgba(0,0,0,0.2))' : 'none',
          opacity: hoveredIndex === null || hoveredIndex === index ? 1 : 0.7,
        }}
      />
    );
  };
  
  return (
    <div className={cn("w-full", className)}>
      <ResponsiveContainer width="100%" height={height}>
        {horizontal ? (
          <BarChart
            data={data}
            layout="vertical"
            margin={{ top: 10, right: 10, left: 80, bottom: 10 }}
            onMouseMove={(e) => {
              if (e.activeTooltipIndex !== undefined) {
                setHoveredIndex(e.activeTooltipIndex);
              }
            }}
            onMouseLeave={() => setHoveredIndex(null)}
          >
            <CartesianGrid 
              strokeDasharray="3 3" 
              horizontal={true} 
              vertical={false}
              stroke={darkMode ? "rgba(148, 163, 184, 0.1)" : "rgba(203, 213, 225, 0.5)"}
            />
            
            <XAxis 
              type="number"
              tick={{ fill: darkMode ? "#94a3b8" : "#64748b", fontSize: 12 }}
              axisLine={{ stroke: darkMode ? "rgba(148, 163, 184, 0.2)" : "rgba(203, 213, 225, 0.8)" }}
              tickLine={false}
            />
            
            <YAxis 
              dataKey="name" 
              type="category"
              tick={{ fill: darkMode ? "#94a3b8" : "#64748b", fontSize: 12 }}
              axisLine={{ stroke: darkMode ? "rgba(148, 163, 184, 0.2)" : "rgba(203, 213, 225, 0.8)" }}
              tickLine={false}
            />
            
            <Tooltip content={<CustomTooltip />} />
            
            <Bar 
              dataKey="value" 
              maxBarSize={maxBarSize}
              shape={<AnimatedBar />}
            >
              {data.map((entry, index) => (
                <Cell 
                  key={`cell-${index}`} 
                  fill={entry.color || defaultColors[index % defaultColors.length]} 
                />
              ))}
            </Bar>
          </BarChart>
        ) : (
          <BarChart
            data={data}
            margin={{ top: 10, right: 10, left: 0, bottom: 30 }}
            onMouseMove={(e) => {
              if (e.activeTooltipIndex !== undefined) {
                setHoveredIndex(e.activeTooltipIndex);
              }
            }}
            onMouseLeave={() => setHoveredIndex(null)}
          >
            <CartesianGrid 
              strokeDasharray="3 3" 
              vertical={false}
              stroke={darkMode ? "rgba(148, 163, 184, 0.1)" : "rgba(203, 213, 225, 0.5)"}
            />
            
            <XAxis 
              dataKey="name"
              tick={{ fill: darkMode ? "#94a3b8" : "#64748b", fontSize: 12 }}
              axisLine={{ stroke: darkMode ? "rgba(148, 163, 184, 0.2)" : "rgba(203, 213, 225, 0.8)" }}
              tickLine={false}
            />
            
            <YAxis 
              tick={{ fill: darkMode ? "#94a3b8" : "#64748b", fontSize: 12 }}
              axisLine={{ stroke: darkMode ? "rgba(148, 163, 184, 0.2)" : "rgba(203, 213, 225, 0.8)" }}
              tickLine={false}
            />
            
            <Tooltip content={<CustomTooltip />} />
            
            <Bar 
              dataKey="value" 
              maxBarSize={maxBarSize}
              shape={<AnimatedBar />}
            >
              {data.map((entry, index) => (
                <Cell 
                  key={`cell-${index}`} 
                  fill={entry.color || defaultColors[index % defaultColors.length]} 
                />
              ))}
            </Bar>
          </BarChart>
        )}
      </ResponsiveContainer>
    </div>
  );
};

export default VulnerabilityBarChart;
