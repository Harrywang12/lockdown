import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';
import { cn } from '../../../utils/cn';

interface VulnerabilityData {
  name: string;
  value: number;
  color: string;
}

interface VulnerabilityDonutChartProps {
  data: VulnerabilityData[];
  height?: number;
  innerRadius?: number;
  outerRadius?: number;
  className?: string;
  animated?: boolean;
  showLegend?: boolean;
  showTotal?: boolean;
}

const VulnerabilityDonutChart: React.FC<VulnerabilityDonutChartProps> = ({
  data,
  height = 300,
  innerRadius = 60,
  outerRadius = 80,
  className,
  animated = true,
  showLegend = true,
  showTotal = true
}) => {
  const [activeIndex, setActiveIndex] = useState<number | null>(null);
  
  // Calculate total vulnerabilities
  const total = data.reduce((sum, item) => sum + item.value, 0);
  
  // Custom tooltip
  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const item = payload[0].payload;
      return (
        <div className="bg-white dark:bg-dark-card p-3 border border-slate-200 dark:border-dark-border rounded-lg shadow-lg">
          <p className="text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
            {item.name}
          </p>
          <p className="text-lg font-bold" style={{ color: item.color }}>
            {item.value} ({((item.value / total) * 100).toFixed(1)}%)
          </p>
        </div>
      );
    }
    
    return null;
  };
  
  // Custom legend
  const CustomLegend = ({ payload }: any) => {
    return (
      <ul className="flex flex-wrap justify-center gap-x-6 gap-y-2 mt-4">
        {payload.map((entry: any, index: number) => (
          <li 
            key={`legend-${index}`}
            className="flex items-center text-sm"
            onMouseEnter={() => setActiveIndex(index)}
            onMouseLeave={() => setActiveIndex(null)}
          >
            <div 
              className="w-3 h-3 rounded-full mr-2" 
              style={{ backgroundColor: entry.color }}
            />
            <span className="text-slate-700 dark:text-slate-300">{entry.value}</span>
            <span className="text-slate-500 dark:text-slate-400 ml-1">
              ({((data[index].value / total) * 100).toFixed(0)}%)
            </span>
          </li>
        ))}
      </ul>
    );
  };
  
  // Animation variants for the center text
  const textVariants = {
    initial: { opacity: 0, scale: 0.8 },
    animate: { 
      opacity: 1, 
      scale: 1,
      transition: {
        delay: 0.5,
        duration: 0.5
      }
    }
  };
  
  return (
    <div className={cn("w-full", className)}>
      <div className="relative" style={{ height }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={data}
              cx="50%"
              cy="50%"
              innerRadius={innerRadius}
              outerRadius={outerRadius}
              paddingAngle={2}
              dataKey="value"
              startAngle={90}
              endAngle={-270}
              animationDuration={animated ? 1000 : 0}
              animationBegin={0}
              onMouseEnter={(_, index) => setActiveIndex(index)}
              onMouseLeave={() => setActiveIndex(null)}
            >
              {data.map((entry, index) => (
                <Cell 
                  key={`cell-${index}`} 
                  fill={entry.color} 
                  stroke="transparent"
                  style={{
                    filter: activeIndex === index ? 'drop-shadow(0px 0px 8px rgba(0,0,0,0.3))' : 'none',
                    opacity: activeIndex === null || activeIndex === index ? 1 : 0.6,
                    transform: activeIndex === index ? 'scale(1.05)' : 'scale(1)',
                    transformOrigin: 'center',
                    transition: 'transform 0.3s, opacity 0.3s, filter 0.3s'
                  }}
                />
              ))}
            </Pie>
            <Tooltip content={<CustomTooltip />} />
            {showLegend && <Legend content={<CustomLegend />} />}
          </PieChart>
        </ResponsiveContainer>
        
        {/* Center text showing total */}
        {showTotal && (
          <div className="absolute inset-0 flex flex-col items-center justify-center pointer-events-none">
            {animated ? (
              <motion.div
                className="text-center"
                variants={textVariants}
                initial="initial"
                animate="animate"
              >
                <div className="text-3xl font-bold text-slate-900 dark:text-white">
                  {total}
                </div>
                <div className="text-sm text-slate-500 dark:text-slate-400">
                  Total
                </div>
              </motion.div>
            ) : (
              <div className="text-center">
                <div className="text-3xl font-bold text-slate-900 dark:text-white">
                  {total}
                </div>
                <div className="text-sm text-slate-500 dark:text-slate-400">
                  Total
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityDonutChart;
